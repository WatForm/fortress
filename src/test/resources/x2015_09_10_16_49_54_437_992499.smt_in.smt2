(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_list_set$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_list_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_list_bool_fun$ 0)
(declare-sort A_set_a_set_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_rbt_bool_fun$ 0)
(declare-sort A_a_list_list_fun$ 0)
(declare-sort A_list_a_list_fun$ 0)
(declare-sort A_list_list_bool_fun$ 0)
(declare-sort A_a_list_bool_fun_fun$ 0)
(declare-sort A_list_a_bool_fun_fun$ 0)
(declare-sort A_list_a_list_list_fun$ 0)
(declare-sort A_list_list_a_list_fun$ 0)
(declare-sort A_list_a_list_bool_fun_fun$ 0)
(declare-sort A_list_list_a_list_list_fun$ 0)
(declare-sort A_list_a_list_a_list_fun_fun$ 0)
(declare-sort A_list_a_list_list_bool_fun_fun$ 0)
(declare-sort A_list_list_a_list_bool_fun_fun$ 0)
(declare-sort A_list_list_a_list_list_bool_fun_fun$ 0)
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-sort A_list$ 0)
(declare-sort A_list_list$ 0)
(declare-sort A_list_list_list$ 0)
(declare-fun r$ () Color$)
(declare-fun b$ () Color$)
(declare-fun empty$ () A_b_rbt$)
(declare-fun select$ (A_b_rbt$) Color$)
(declare-fun selecta$ (A_b_rbt$) A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$) A$)
(declare-fun selectc$ (A_b_rbt$) B$)
(declare-fun selectd$ (A_b_rbt$) A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$) A_b_rbt$)
(declare-fun nil$ () A_list$)
(declare-fun hd$ (A_list$) A$)
(declare-fun tl$ (A_list$) A_list$)
(declare-fun cons$ (A$ A_list$) A_list$)
(declare-fun nil$a () A_list_list$)
(declare-fun hd$a (A_list_list$) A_list$)
(declare-fun tl$a (A_list_list$) A_list_list$)
(declare-fun cons$a (A_list$ A_list_list$) A_list_list$)
(declare-fun nil$b () A_list_list_list$)
(declare-fun hd$b (A_list_list_list$) A_list_list$)
(declare-fun tl$b (A_list_list_list$) A_list_list_list$)
(declare-fun cons$b (A_list_list$ A_list_list_list$) A_list_list_list$)
(declare-fun k$ () A$)
(declare-fun uu$ (A_list_set$) A_list_bool_fun$)
(declare-fun inf$ (A_set$) A_set_a_set_fun$)
(declare-fun max$ (A_a_bool_fun_fun$) A_a_a_fun_fun$)
(declare-fun min$ (A_a_bool_fun_fun$) A_a_a_fun_fun$)
(declare-fun rev$ (A_list$) A_list$)
(declare-fun set$ (A_list$) A_set$)
(declare-fun uua$ (A_set$) A_bool_fun$)
(declare-fun bind$ (A_list_list$ A_list_a_list_fun$) A_list$)
(declare-fun inf$a (A_list_set$ A_list_set$) A_list_set$)
(declare-fun keys$ (A_b_rbt$) A_list$)
(declare-fun last$ (A_list_list$) A_list$)
(declare-fun less$ () A_a_bool_fun_fun$)
(declare-fun maps$ (A_list_a_list_fun$) A_list_list_a_list_fun$)
(declare-fun set$a (A_list_list$) A_list_set$)
(declare-fun succ$ (A_list_set$ A_list$) A_set$)
(declare-fun bind$a (A_list$ A_a_list_fun$) A_list$)
(declare-fun bind$b (A_list$ A_a_list_list_fun$) A_list_list$)
(declare-fun bind$c (A_list_list$ A_list_a_list_list_fun$) A_list_list$)
(declare-fun last$a (A_list$) A$)
(declare-fun less$a (A_set$ A_set$) Bool)
(declare-fun maps$a (A_a_list_fun$) A_list_a_list_fun$)
(declare-fun maps$b (A_a_list_list_fun$) A_list_a_list_list_fun$)
(declare-fun maps$c (A_list_a_list_list_fun$) A_list_list_a_list_list_fun$)
(declare-fun shift$ (A_list_set$ A$) A_list_set$)
(declare-fun append$ (A_list$) A_list_a_list_fun$)
(declare-fun atMost$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun insert$ (A_list$) A_list_list_a_list_list_fun$)
(declare-fun member$ (A_list$ A_list_set$) Bool)
(declare-fun append$a (A_list_list$) A_list_list_a_list_list_fun$)
(declare-fun atLeast$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun butlast$ (A_list_list$) A_list_list$)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_list_bool_fun$ A_list$) Bool)
(declare-fun insert$a (A$) A_list_a_list_fun$)
(declare-fun less_eq$ () A_a_bool_fun_fun$)
(declare-fun lexordp$ (A_a_bool_fun_fun$) A_list_a_list_bool_fun_fun$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun rotate1$ (A_list_list$) A_list_list$)
(declare-fun butlast$a (A_list$) A_list$)
(declare-fun collect$a (A_list_bool_fun$) A_list_set$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$c (A_b_rbt_bool_fun$ A_b_rbt$) Bool)
(declare-fun fun_app$d (A_list_a_list_bool_fun_fun$ A_list$) A_list_bool_fun$)
(declare-fun fun_app$e (A_set_a_set_fun$ A_set$) A_set$)
(declare-fun fun_app$f (A_list_a_list_fun$ A_list$) A_list$)
(declare-fun fun_app$g (A_list_list_a_list_list_fun$ A_list_list$) A_list_list$)
(declare-fun fun_app$h (A_list_list_bool_fun$ A_list_list$) Bool)
(declare-fun fun_app$i (A_list_list_a_list_list_bool_fun_fun$ A_list_list$) A_list_list_bool_fun$)
(declare-fun fun_app$j (A_list_a_list_list_bool_fun_fun$ A_list$) A_list_list_bool_fun$)
(declare-fun fun_app$k (A_list_list_a_list_bool_fun_fun$ A_list_list$) A_list_bool_fun$)
(declare-fun fun_app$l (A_a_list_fun$ A$) A_list$)
(declare-fun fun_app$m (A_list_list_a_list_fun$ A_list_list$) A_list$)
(declare-fun fun_app$n (A_list_a_list_list_fun$ A_list$) A_list_list$)
(declare-fun fun_app$o (B_bool_fun$ B$) Bool)
(declare-fun fun_app$p (A_a_list_bool_fun_fun$ A$) A_list_bool_fun$)
(declare-fun fun_app$q (A_list_a_bool_fun_fun$ A_list$) A_bool_fun$)
(declare-fun fun_app$r (A_list_a_list_a_list_fun_fun$ A_list$) A_list_a_list_fun$)
(declare-fun fun_app$s (A_a_fun$ A$) A$)
(declare-fun fun_app$t (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun lexordp$a (A_list_a_list_bool_fun_fun$) A_list_list_a_list_list_bool_fun_fun$)
(declare-fun list_ex1$ (A_list_bool_fun$) A_list_list_bool_fun$)
(declare-fun listrelp$ (A_a_list_bool_fun_fun$) A_list_a_list_list_bool_fun_fun$)
(declare-fun pred_rbt$ (A_bool_fun$ B_bool_fun$ A_b_rbt$) Bool)
(declare-fun rbt_less$ (A_a_bool_fun_fun$ A$) A_b_rbt_bool_fun$)
(declare-fun rotate1$a (A_list$) A_list$)
(declare-fun sublists$ (A_list_list$) A_list_list_list$)
(declare-fun the_elem$ (A_list_set$) A_list$)
(declare-fun lessThan$a (A_list_a_list_bool_fun_fun$ A_list$) A_list_set$)
(declare-fun list_ex1$a (A_bool_fun$) A_list_bool_fun$)
(declare-fun listrelp$a (A_list_a_bool_fun_fun$) A_list_list_a_list_bool_fun_fun$)
(declare-fun listrelp$b (A_list_a_list_bool_fun_fun$) A_list_list_a_list_list_bool_fun_fun$)
(declare-fun listrelp$c (A_a_bool_fun_fun$) A_list_a_list_bool_fun_fun$)
(declare-fun sublists$a (A_list$) A_list_list$)
(declare-fun the_elem$a (A_set$) A$)
(declare-fun can_select$ (A_bool_fun$ A_set$) Bool)
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$) A_list_a_list_bool_fun_fun$)
(declare-fun can_select$a (A_list_bool_fun$ A_list_set$) Bool)
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun lexordp_eq$a (A_list_a_list_bool_fun_fun$) A_list_list_a_list_list_bool_fun_fun$)
(declare-fun rbt_greater$ (A_a_bool_fun_fun$ A$ A_b_rbt$) Bool)
(declare-fun remdups_adj$ (A_list$) A_list$)
(declare-fun greaterThan$a (A_list_a_list_bool_fun_fun$ A_list$) A_list_set$)
(declare-fun atLeastAtMost$ (A_a_bool_fun_fun$ A$ A$) A_set$)
(declare-fun product_lists$ (A_list_list_list$) A_list_list_list$)
(declare-fun product_lists$a (A_list_list$) A_list_list$)
(declare-fun atLeastLessThan$ (A_a_bool_fun_fun$ A_a_bool_fun_fun$ A$ A$) A_set$)
(declare-fun map_tailrec_rev$ (A_a_fun$) A_list_a_list_a_list_fun_fun$)
(declare-fun greaterThanAtMost$ (A_a_bool_fun_fun$ A_a_bool_fun_fun$ A$ A$) A_set$)
(declare-fun greaterThanLessThan$ (A_a_bool_fun_fun$ A$ A$) A_set$)
(declare-fun greaterThanLessThan$a (A_list_a_list_bool_fun_fun$ A_list$ A_list$) A_list_set$)
(assert (forall ((?v0 A_list_set$) (?v1 A_list$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$a (uua$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$a (uua$ ?v0) ?v1)))))
(assert (not (= (rbt_greater$ less$ k$ empty$) true)))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$a (fun_app$b less$ ?v0) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$a (fun_app$b less$ ?v1) ?v2)) (fun_app$a (fun_app$b less$ ?v0) ?v2)) ))
(assert (forall ((?v0 A$)) (! (= (fun_app$c (rbt_less$ less$ ?v0) empty$) true) :pattern ((rbt_less$ less$ ?v0)))))
(assert (forall ((?v0 A_list$)) (fun_app$ (fun_app$d (lexordp_eq$ less$) ?v0) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (= (member$a ?v0 (greaterThanLessThan$ less$ ?v1 ?v2)) (and (fun_app$a (fun_app$b less$ ?v1) ?v0) (fun_app$a (fun_app$b less$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_list$)) (=> (forall ((?v1 A$)) (not (fun_app$a (fun_app$b less$ ?v1) ?v1)) ) (not (fun_app$ (fun_app$d (lexordp$ less$) ?v0) ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A_b_rbt$)) (= (rbt_greater$ less$ ?v0 ?v1) (forall ((?v2 A$)) (=> (member$a ?v2 (set$ (keys$ ?v1))) (fun_app$a (fun_app$b less$ ?v0) ?v2)) )) ))
(assert (forall ((?v0 A$) (?v1 A$)) (= (member$a ?v0 (lessThan$ less$ ?v1)) (fun_app$a (fun_app$b less$ ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (= (member$a ?v0 (greaterThan$ less$ ?v1)) (fun_app$a (fun_app$b less$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (! (= (fun_app$c (rbt_less$ ?v0 ?v1) empty$) true) :pattern ((rbt_less$ ?v0 ?v1)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 B_bool_fun$)) (pred_rbt$ ?v0 ?v1 empty$) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (fun_app$ (fun_app$d (lexordp$ less$) ?v0) ?v1) (fun_app$ (fun_app$d (lexordp_eq$ less$) ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_b_rbt$)) (= (fun_app$c (rbt_less$ less$ ?v0) ?v1) (forall ((?v2 A$)) (=> (member$a ?v2 (set$ (keys$ ?v1))) (fun_app$a (fun_app$b less$ ?v2) ?v0)) )) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_b_rbt$)) (= (fun_app$c (rbt_less$ ?v0 ?v1) ?v2) (forall ((?v3 A$)) (=> (member$a ?v3 (set$ (keys$ ?v2))) (fun_app$a (fun_app$b ?v0 ?v3) ?v1)) )) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_b_rbt$)) (= (rbt_greater$ ?v0 ?v1 ?v2) (forall ((?v3 A$)) (=> (member$a ?v3 (set$ (keys$ ?v2))) (fun_app$a (fun_app$b ?v0 ?v1) ?v3)) )) ))
(assert (forall ((?v0 A$) (?v1 A$)) (! (= (greaterThanLessThan$ less$ ?v0 ?v1) (fun_app$e (inf$ (greaterThan$ less$ ?v0)) (lessThan$ less$ ?v1))) :pattern ((greaterThanLessThan$ less$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A$)) (! (= (greaterThanLessThan$ less$ ?v0 ?v1) (fun_app$e (inf$ (greaterThan$ less$ ?v0)) (lessThan$ less$ ?v1))) :pattern ((greaterThanLessThan$ less$ ?v0 ?v1)))))
(assert (forall ((?v0 A_list$)) (fun_app$ (fun_app$d (lexordp_eq$ less$) nil$) ?v0) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (fun_app$ (fun_app$d (lexordp$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$d (lexordp_eq$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (and (not (fun_app$a (fun_app$b less$ ?v0) ?v1)) (and (not (fun_app$a (fun_app$b less$ ?v1) ?v0)) (fun_app$ (fun_app$d (lexordp_eq$ less$) ?v2) ?v3))) (fun_app$ (fun_app$d (lexordp_eq$ less$) (cons$ ?v0 ?v2)) (cons$ ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (fun_app$a (fun_app$b less$ ?v0) ?v1) (fun_app$ (fun_app$d (lexordp_eq$ less$) (cons$ ?v0 ?v2)) (cons$ ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (and (not (fun_app$a (fun_app$b less$ ?v0) ?v1)) (and (not (fun_app$a (fun_app$b less$ ?v1) ?v0)) (fun_app$ (fun_app$d (lexordp$ less$) ?v2) ?v3))) (fun_app$ (fun_app$d (lexordp$ less$) (cons$ ?v0 ?v2)) (cons$ ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (fun_app$a (fun_app$b less$ ?v0) ?v1) (fun_app$ (fun_app$d (lexordp$ less$) (cons$ ?v0 ?v2)) (cons$ ?v1 ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (fun_app$ (fun_app$d (lexordp$ less$) ?v0) ?v1) (fun_app$ (fun_app$d (lexordp$ less$) (fun_app$f (append$ ?v2) ?v0)) (fun_app$f (append$ ?v2) ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$ (fun_app$d (lexordp$ less$) (fun_app$f (append$ ?v0) ?v1)) (fun_app$f (append$ ?v0) ?v2)) (forall ((?v3 A$)) (not (fun_app$a (fun_app$b less$ ?v3) ?v3)) )) (fun_app$ (fun_app$d (lexordp$ less$) ?v1) ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_a_list_bool_fun_fun$) (?v2 A_list$) (?v3 A_list$)) (= (member$ ?v0 (greaterThanLessThan$a ?v1 ?v2 ?v3)) (and (fun_app$ (fun_app$d ?v1 ?v2) ?v0) (fun_app$ (fun_app$d ?v1 ?v0) ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$) (?v2 A$) (?v3 A$)) (= (member$a ?v0 (greaterThanLessThan$ ?v1 ?v2 ?v3)) (and (fun_app$a (fun_app$b ?v1 ?v2) ?v0) (fun_app$a (fun_app$b ?v1 ?v0) ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (cons$a ?v0 ?v1) (cons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$f (append$ (fun_app$f (append$ ?v0) ?v1)) ?v2) (fun_app$f (append$ ?v0) (fun_app$f (append$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (fun_app$f (append$ ?v0) ?v1) (fun_app$f (append$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (fun_app$f (append$ ?v0) ?v1) (fun_app$f (append$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (fun_app$ (fun_app$d (lexordp$ less$) ?v0) ?v1) (or (exists ((?v2 A$) (?v3 A_list$)) (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) ) (or (exists ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (fun_app$a (fun_app$b less$ ?v2) ?v3))) ) (exists ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (not (fun_app$a (fun_app$b less$ ?v2) ?v3)) (and (not (fun_app$a (fun_app$b less$ ?v3) ?v2)) (fun_app$ (fun_app$d (lexordp$ less$) ?v4) ?v5))))) )))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (fun_app$ (fun_app$d (lexordp$ less$) ?v0) ?v1) (and (forall ((?v2 A$) (?v3 A_list$)) (=> (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) false) ) (and (forall ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (fun_app$a (fun_app$b less$ ?v2) ?v3))) false) ) (forall ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (not (fun_app$a (fun_app$b less$ ?v2) ?v3)) (and (not (fun_app$a (fun_app$b less$ ?v3) ?v2)) (fun_app$ (fun_app$d (lexordp$ less$) ?v4) ?v5))))) false) )))) false) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (fun_app$ (fun_app$d (lexordp$ less$) nil$) (cons$ ?v0 ?v1)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (fun_app$ (fun_app$d (lexordp_eq$ less$) ?v0) ?v1) (or (exists ((?v2 A_list$)) (and (= ?v0 nil$) (= ?v1 ?v2)) ) (or (exists ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (fun_app$a (fun_app$b less$ ?v2) ?v3))) ) (exists ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (not (fun_app$a (fun_app$b less$ ?v2) ?v3)) (and (not (fun_app$a (fun_app$b less$ ?v3) ?v2)) (fun_app$ (fun_app$d (lexordp_eq$ less$) ?v4) ?v5))))) )))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (fun_app$ (fun_app$d (lexordp_eq$ less$) ?v0) ?v1) (and (forall ((?v2 A_list$)) (=> (and (= ?v0 nil$) (= ?v1 ?v2)) false) ) (and (forall ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (fun_app$a (fun_app$b less$ ?v2) ?v3))) false) ) (forall ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (not (fun_app$a (fun_app$b less$ ?v2) ?v3)) (and (not (fun_app$a (fun_app$b less$ ?v3) ?v2)) (fun_app$ (fun_app$d (lexordp_eq$ less$) ?v4) ?v5))))) false) )))) false) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (fun_app$a (fun_app$b less$ ?v0) ?v1) (fun_app$ (fun_app$d (lexordp$ less$) (fun_app$f (append$ ?v2) (cons$ ?v0 ?v3))) (fun_app$f (append$ ?v2) (cons$ ?v1 ?v4)))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (not (= ?v0 nil$)) (fun_app$ (fun_app$d (lexordp$ less$) ?v1) (fun_app$f (append$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_list_list$)) (! (= (fun_app$g (append$a ?v0) nil$a) ?v0) :pattern ((append$a ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$f (append$ ?v0) nil$) ?v0) :pattern ((append$ ?v0)))))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$g (append$a ?v0) ?v1) nil$a) (and (= ?v0 nil$a) (= ?v1 nil$a))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$f (append$ ?v0) ?v1) nil$) (and (= ?v0 nil$) (= ?v1 nil$))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= nil$a (fun_app$g (append$a ?v0) ?v1)) (and (= ?v0 nil$a) (= ?v1 nil$a))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= nil$ (fun_app$f (append$ ?v0) ?v1)) (and (= ?v0 nil$) (= ?v1 nil$))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= ?v0 (fun_app$g (append$a ?v0) ?v1)) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= ?v0 (fun_app$f (append$ ?v0) ?v1)) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= ?v0 (fun_app$g (append$a ?v1) ?v0)) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= ?v0 (fun_app$f (append$ ?v1) ?v0)) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (=> (forall ((?v2 A$)) (= (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 A_list_set$)) (= (collect$a (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_set$)) (= (collect$ (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (= (member$ ?v0 (collect$a ?v1)) (fun_app$ ?v1 ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (member$a ?v0 (collect$ ?v1)) (fun_app$a ?v1 ?v0)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$g (append$a ?v0) ?v1) ?v0) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$f (append$ ?v0) ?v1) ?v0) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$g (append$a ?v0) ?v1) ?v1) (= ?v0 nil$a)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$f (append$ ?v0) ?v1) ?v1) (= ?v0 nil$)) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (! (= (fun_app$h (fun_app$i (lexordp$a ?v0) (cons$a ?v1 ?v2)) (cons$a ?v3 ?v4)) (or (fun_app$ (fun_app$d ?v0 ?v1) ?v3) (and (not (fun_app$ (fun_app$d ?v0 ?v3) ?v1)) (fun_app$h (fun_app$i (lexordp$a ?v0) ?v2) ?v4)))) :pattern ((fun_app$h (fun_app$i (lexordp$a ?v0) (cons$a ?v1 ?v2)) (cons$a ?v3 ?v4))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$) (?v3 A$) (?v4 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4)) (or (fun_app$a (fun_app$b ?v0 ?v1) ?v3) (and (not (fun_app$a (fun_app$b ?v0 ?v3) ?v1)) (fun_app$ (fun_app$d (lexordp$ ?v0) ?v2) ?v4)))) :pattern ((fun_app$ (fun_app$d (lexordp$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4))))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$)) (! (= (fun_app$h (fun_app$i (lexordp$a ?v0) ?v1) nil$a) false) :pattern ((fun_app$i (lexordp$a ?v0) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp$ ?v0) ?v1) nil$) false) :pattern ((fun_app$d (lexordp$ ?v0) ?v1)))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$)) (! (= (fun_app$h (fun_app$i (lexordp$a ?v0) nil$a) ?v1) (not (= ?v1 nil$a))) :pattern ((fun_app$h (fun_app$i (lexordp$a ?v0) nil$a) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp$ ?v0) nil$) ?v1) (not (= ?v1 nil$))) :pattern ((fun_app$ (fun_app$d (lexordp$ ?v0) nil$) ?v1)))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (! (= (fun_app$h (fun_app$i (lexordp_eq$a ?v0) (cons$a ?v1 ?v2)) (cons$a ?v3 ?v4)) (or (fun_app$ (fun_app$d ?v0 ?v1) ?v3) (and (not (fun_app$ (fun_app$d ?v0 ?v3) ?v1)) (fun_app$h (fun_app$i (lexordp_eq$a ?v0) ?v2) ?v4)))) :pattern ((fun_app$h (fun_app$i (lexordp_eq$a ?v0) (cons$a ?v1 ?v2)) (cons$a ?v3 ?v4))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$) (?v3 A$) (?v4 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4)) (or (fun_app$a (fun_app$b ?v0 ?v1) ?v3) (and (not (fun_app$a (fun_app$b ?v0 ?v3) ?v1)) (fun_app$ (fun_app$d (lexordp_eq$ ?v0) ?v2) ?v4)))) :pattern ((fun_app$ (fun_app$d (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4))))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$)) (! (= (fun_app$h (fun_app$i (lexordp_eq$a ?v0) nil$a) ?v1) true) :pattern ((fun_app$h (fun_app$i (lexordp_eq$a ?v0) nil$a) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp_eq$ ?v0) nil$) ?v1) true) :pattern ((fun_app$ (fun_app$d (lexordp_eq$ ?v0) nil$) ?v1)))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$)) (! (= (fun_app$h (fun_app$i (lexordp_eq$a ?v0) ?v1) nil$a) (= ?v1 nil$a)) :pattern ((fun_app$i (lexordp_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp_eq$ ?v0) ?v1) nil$) (= ?v1 nil$)) :pattern ((fun_app$d (lexordp_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list$)) (= (= (fun_app$g (append$a ?v0) (cons$a ?v1 nil$a)) (fun_app$g (append$a ?v2) (cons$a ?v3 nil$a))) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$) (?v3 A$)) (= (= (fun_app$f (append$ ?v0) (cons$ ?v1 nil$)) (fun_app$f (append$ ?v2) (cons$ ?v3 nil$))) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (! (= (fun_app$h (fun_app$i (lexordp_eq$a ?v0) (cons$a ?v1 ?v2)) nil$a) false) :pattern ((fun_app$i (lexordp_eq$a ?v0) (cons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) nil$) false) :pattern ((fun_app$d (lexordp_eq$ ?v0) (cons$ ?v1 ?v2))))))
(assert (= (keys$ empty$) nil$))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp$ less$) (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3)) (or (fun_app$a (fun_app$b less$ ?v0) ?v2) (and (not (fun_app$a (fun_app$b less$ ?v2) ?v0)) (fun_app$ (fun_app$d (lexordp$ less$) ?v1) ?v3)))) :pattern ((fun_app$ (fun_app$d (lexordp$ less$) (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3))))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp_eq$ less$) (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3)) (or (fun_app$a (fun_app$b less$ ?v0) ?v2) (and (not (fun_app$a (fun_app$b less$ ?v2) ?v0)) (fun_app$ (fun_app$d (lexordp_eq$ less$) ?v1) ?v3)))) :pattern ((fun_app$ (fun_app$d (lexordp_eq$ less$) (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp$ less$) nil$) ?v0) (not (= ?v0 nil$))) :pattern ((fun_app$ (fun_app$d (lexordp$ less$) nil$) ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp$ less$) ?v0) nil$) false) :pattern ((fun_app$d (lexordp$ less$) ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp_eq$ less$) ?v0) nil$) (= ?v0 nil$)) :pattern ((fun_app$d (lexordp_eq$ less$) ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp_eq$ less$) nil$) ?v0) true) :pattern ((fun_app$ (fun_app$d (lexordp_eq$ less$) nil$) ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (fun_app$ (fun_app$d (lexordp_eq$ less$) (cons$ ?v0 ?v1)) nil$) false) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (= (fun_app$h (fun_app$i (lexordp$a ?v0) ?v1) ?v2) (or (exists ((?v3 A_list$) (?v4 A_list_list$)) (and (= ?v1 nil$a) (= ?v2 (cons$a ?v3 ?v4))) ) (or (exists ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (fun_app$ (fun_app$d ?v0 ?v3) ?v4))) ) (exists ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (not (fun_app$ (fun_app$d ?v0 ?v3) ?v4)) (and (not (fun_app$ (fun_app$d ?v0 ?v4) ?v3)) (fun_app$h (fun_app$i (lexordp$a ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$ (fun_app$d (lexordp$ ?v0) ?v1) ?v2) (or (exists ((?v3 A$) (?v4 A_list$)) (and (= ?v1 nil$) (= ?v2 (cons$ ?v3 ?v4))) ) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$a (fun_app$b ?v0 ?v3) ?v4))) ) (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$a (fun_app$b ?v0 ?v3) ?v4)) (and (not (fun_app$a (fun_app$b ?v0 ?v4) ?v3)) (fun_app$ (fun_app$d (lexordp$ ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (= (fun_app$h (fun_app$i (lexordp_eq$a ?v0) ?v1) ?v2) (or (exists ((?v3 A_list_list$)) (and (= ?v1 nil$a) (= ?v2 ?v3)) ) (or (exists ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (fun_app$ (fun_app$d ?v0 ?v3) ?v4))) ) (exists ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (not (fun_app$ (fun_app$d ?v0 ?v3) ?v4)) (and (not (fun_app$ (fun_app$d ?v0 ?v4) ?v3)) (fun_app$h (fun_app$i (lexordp_eq$a ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$ (fun_app$d (lexordp_eq$ ?v0) ?v1) ?v2) (or (exists ((?v3 A_list$)) (and (= ?v1 nil$) (= ?v2 ?v3)) ) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$a (fun_app$b ?v0 ?v3) ?v4))) ) (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$a (fun_app$b ?v0 ?v3) ?v4)) (and (not (fun_app$a (fun_app$b ?v0 ?v4) ?v3)) (fun_app$ (fun_app$d (lexordp_eq$ ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (= (exists ((?v2 A_list$)) (and (member$ ?v2 (set$a ?v0)) (fun_app$ ?v1 ?v2)) ) (exists ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (and (= ?v0 (fun_app$g (append$a ?v2) (cons$a ?v3 ?v4))) (and (fun_app$ ?v1 ?v3) (forall ((?v5 A_list$)) (=> (member$ ?v5 (set$a ?v2)) (not (fun_app$ ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (= (exists ((?v2 A$)) (and (member$a ?v2 (set$ ?v0)) (fun_app$a ?v1 ?v2)) ) (exists ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (and (= ?v0 (fun_app$f (append$ ?v2) (cons$ ?v3 ?v4))) (and (fun_app$a ?v1 ?v3) (forall ((?v5 A$)) (=> (member$a ?v5 (set$ ?v2)) (not (fun_app$a ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (= (exists ((?v2 A_list$)) (and (member$ ?v2 (set$a ?v0)) (fun_app$ ?v1 ?v2)) ) (exists ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (and (= ?v0 (fun_app$g (append$a ?v2) (cons$a ?v3 ?v4))) (and (fun_app$ ?v1 ?v3) (forall ((?v5 A_list$)) (=> (member$ ?v5 (set$a ?v4)) (not (fun_app$ ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (= (exists ((?v2 A$)) (and (member$a ?v2 (set$ ?v0)) (fun_app$a ?v1 ?v2)) ) (exists ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (and (= ?v0 (fun_app$f (append$ ?v2) (cons$ ?v3 ?v4))) (and (fun_app$a ?v1 ?v3) (forall ((?v5 A$)) (=> (member$a ?v5 (set$ ?v4)) (not (fun_app$a ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (= (member$ ?v0 (set$a ?v1)) (exists ((?v2 A_list_list$) (?v3 A_list_list$)) (and (= ?v1 (fun_app$g (append$a ?v2) (cons$a ?v0 ?v3))) (not (member$ ?v0 (set$a ?v2)))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (= (member$a ?v0 (set$ ?v1)) (exists ((?v2 A_list$) (?v3 A_list$)) (and (= ?v1 (fun_app$f (append$ ?v2) (cons$ ?v0 ?v3))) (not (member$a ?v0 (set$ ?v2)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (= (member$ ?v0 (set$a ?v1)) (exists ((?v2 A_list_list$) (?v3 A_list_list$)) (and (= ?v1 (fun_app$g (append$a ?v2) (cons$a ?v0 ?v3))) (not (member$ ?v0 (set$a ?v3)))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (= (member$a ?v0 (set$ ?v1)) (exists ((?v2 A_list$) (?v3 A_list$)) (and (= ?v1 (fun_app$f (append$ ?v2) (cons$ ?v0 ?v3))) (not (member$a ?v0 (set$ ?v3)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (= (member$ ?v0 (set$a ?v1)) (exists ((?v2 A_list_list$) (?v3 A_list_list$)) (= ?v1 (fun_app$g (append$a ?v2) (cons$a ?v0 ?v3))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (= (member$a ?v0 (set$ ?v1)) (exists ((?v2 A_list$) (?v3 A_list$)) (= ?v1 (fun_app$f (append$ ?v2) (cons$ ?v0 ?v3))) )) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (fun_app$h (fun_app$i (lexordp$a ?v0) ?v1) ?v2) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (=> (and (= ?v1 nil$a) (= ?v2 (cons$a ?v3 ?v4))) false) ) (and (forall ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (fun_app$ (fun_app$d ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (not (fun_app$ (fun_app$d ?v0 ?v3) ?v4)) (and (not (fun_app$ (fun_app$d ?v0 ?v4) ?v3)) (fun_app$h (fun_app$i (lexordp$a ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$ (fun_app$d (lexordp$ ?v0) ?v1) ?v2) (and (forall ((?v3 A$) (?v4 A_list$)) (=> (and (= ?v1 nil$) (= ?v2 (cons$ ?v3 ?v4))) false) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$a (fun_app$b ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$a (fun_app$b ?v0 ?v3) ?v4)) (and (not (fun_app$a (fun_app$b ?v0 ?v4) ?v3)) (fun_app$ (fun_app$d (lexordp$ ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (fun_app$h (fun_app$i (lexordp_eq$a ?v0) ?v1) ?v2) (and (forall ((?v3 A_list_list$)) (=> (and (= ?v1 nil$a) (= ?v2 ?v3)) false) ) (and (forall ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (fun_app$ (fun_app$d ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (not (fun_app$ (fun_app$d ?v0 ?v3) ?v4)) (and (not (fun_app$ (fun_app$d ?v0 ?v4) ?v3)) (fun_app$h (fun_app$i (lexordp_eq$a ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$ (fun_app$d (lexordp_eq$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_list$)) (=> (and (= ?v1 nil$) (= ?v2 ?v3)) false) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$a (fun_app$b ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$a (fun_app$b ?v0 ?v3) ?v4)) (and (not (fun_app$a (fun_app$b ?v0 ?v4) ?v3)) (fun_app$ (fun_app$d (lexordp_eq$ ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (=> (and (exists ((?v2 A_list$)) (and (member$ ?v2 (set$a ?v0)) (fun_app$ ?v1 ?v2)) ) (forall ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (=> (and (= ?v0 (fun_app$g (append$a ?v2) (cons$a ?v3 ?v4))) (and (fun_app$ ?v1 ?v3) (forall ((?v5 A_list$)) (=> (member$ ?v5 (set$a ?v2)) (not (fun_app$ ?v1 ?v5))) ))) false) )) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (=> (and (exists ((?v2 A$)) (and (member$a ?v2 (set$ ?v0)) (fun_app$a ?v1 ?v2)) ) (forall ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (=> (and (= ?v0 (fun_app$f (append$ ?v2) (cons$ ?v3 ?v4))) (and (fun_app$a ?v1 ?v3) (forall ((?v5 A$)) (=> (member$a ?v5 (set$ ?v2)) (not (fun_app$a ?v1 ?v5))) ))) false) )) false) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (=> (and (exists ((?v2 A_list$)) (and (member$ ?v2 (set$a ?v0)) (fun_app$ ?v1 ?v2)) ) (forall ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (=> (and (= ?v0 (fun_app$g (append$a ?v2) (cons$a ?v3 ?v4))) (and (fun_app$ ?v1 ?v3) (forall ((?v5 A_list$)) (=> (member$ ?v5 (set$a ?v4)) (not (fun_app$ ?v1 ?v5))) ))) false) )) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (=> (and (exists ((?v2 A$)) (and (member$a ?v2 (set$ ?v0)) (fun_app$a ?v1 ?v2)) ) (forall ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (=> (and (= ?v0 (fun_app$f (append$ ?v2) (cons$ ?v3 ?v4))) (and (fun_app$a ?v1 ?v3) (forall ((?v5 A$)) (=> (member$a ?v5 (set$ ?v4)) (not (fun_app$a ?v1 ?v5))) ))) false) )) false) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (=> (and (exists ((?v2 A_list$)) (and (member$ ?v2 (set$a ?v0)) (fun_app$ ?v1 ?v2)) ) (forall ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (=> (and (= ?v0 (fun_app$g (append$a ?v2) (cons$a ?v3 ?v4))) (fun_app$ ?v1 ?v3)) false) )) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (=> (and (exists ((?v2 A$)) (and (member$a ?v2 (set$ ?v0)) (fun_app$a ?v1 ?v2)) ) (forall ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (=> (and (= ?v0 (fun_app$f (append$ ?v2) (cons$ ?v3 ?v4))) (fun_app$a ?v1 ?v3)) false) )) false) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (=> (exists ((?v2 A_list$)) (and (member$ ?v2 (set$a ?v0)) (fun_app$ ?v1 ?v2)) ) (exists ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (and (= ?v0 (fun_app$g (append$a ?v2) (cons$a ?v3 ?v4))) (and (fun_app$ ?v1 ?v3) (forall ((?v5 A_list$)) (=> (member$ ?v5 (set$a ?v2)) (not (fun_app$ ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (=> (exists ((?v2 A$)) (and (member$a ?v2 (set$ ?v0)) (fun_app$a ?v1 ?v2)) ) (exists ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (and (= ?v0 (fun_app$f (append$ ?v2) (cons$ ?v3 ?v4))) (and (fun_app$a ?v1 ?v3) (forall ((?v5 A$)) (=> (member$a ?v5 (set$ ?v2)) (not (fun_app$a ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (=> (exists ((?v2 A_list$)) (and (member$ ?v2 (set$a ?v0)) (fun_app$ ?v1 ?v2)) ) (exists ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (and (= ?v0 (fun_app$g (append$a ?v2) (cons$a ?v3 ?v4))) (and (fun_app$ ?v1 ?v3) (forall ((?v5 A_list$)) (=> (member$ ?v5 (set$a ?v4)) (not (fun_app$ ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (=> (exists ((?v2 A$)) (and (member$a ?v2 (set$ ?v0)) (fun_app$a ?v1 ?v2)) ) (exists ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (and (= ?v0 (fun_app$f (append$ ?v2) (cons$ ?v3 ?v4))) (and (fun_app$a ?v1 ?v3) (forall ((?v5 A$)) (=> (member$a ?v5 (set$ ?v4)) (not (fun_app$a ?v1 ?v5))) ))) )) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_bool_fun$)) (=> (exists ((?v2 A_list$)) (and (member$ ?v2 (set$a ?v0)) (fun_app$ ?v1 ?v2)) ) (exists ((?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (and (= ?v0 (fun_app$g (append$a ?v2) (cons$a ?v3 ?v4))) (fun_app$ ?v1 ?v3)) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (=> (exists ((?v2 A$)) (and (member$a ?v2 (set$ ?v0)) (fun_app$a ?v1 ?v2)) ) (exists ((?v2 A_list$) (?v3 A$) (?v4 A_list$)) (and (= ?v0 (fun_app$f (append$ ?v2) (cons$ ?v3 ?v4))) (fun_app$a ?v1 ?v3)) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (=> (member$ ?v0 (set$a ?v1)) (exists ((?v2 A_list_list$) (?v3 A_list_list$)) (and (= ?v1 (fun_app$g (append$a ?v2) (cons$a ?v0 ?v3))) (not (member$ ?v0 (set$a ?v2)))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (=> (member$a ?v0 (set$ ?v1)) (exists ((?v2 A_list$) (?v3 A_list$)) (and (= ?v1 (fun_app$f (append$ ?v2) (cons$ ?v0 ?v3))) (not (member$a ?v0 (set$ ?v2)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (=> (member$ ?v0 (set$a ?v1)) (exists ((?v2 A_list_list$) (?v3 A_list_list$)) (and (= ?v1 (fun_app$g (append$a ?v2) (cons$a ?v0 ?v3))) (not (member$ ?v0 (set$a ?v3)))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (=> (member$a ?v0 (set$ ?v1)) (exists ((?v2 A_list$) (?v3 A_list$)) (and (= ?v1 (fun_app$f (append$ ?v2) (cons$ ?v0 ?v3))) (not (member$a ?v0 (set$ ?v3)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (=> (member$ ?v0 (set$a ?v1)) (exists ((?v2 A_list_list$) (?v3 A_list_list$)) (= ?v1 (fun_app$g (append$a ?v2) (cons$a ?v0 ?v3))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (=> (member$a ?v0 (set$ ?v1)) (exists ((?v2 A_list$) (?v3 A_list$)) (= ?v1 (fun_app$f (append$ ?v2) (cons$ ?v0 ?v3))) )) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_a_list_bool_fun_fun$) (?v2 A_list_list$)) (=> (not (= ?v0 nil$a)) (fun_app$h (fun_app$i (lexordp$a ?v1) ?v2) (fun_app$g (append$a ?v2) ?v0))) ))
(assert (forall ((?v0 A_list$) (?v1 A_a_bool_fun_fun$) (?v2 A_list$)) (=> (not (= ?v0 nil$)) (fun_app$ (fun_app$d (lexordp$ ?v1) ?v2) (fun_app$f (append$ ?v2) ?v0))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list_list$) (?v5 A_list_list$)) (=> (fun_app$ (fun_app$d ?v0 ?v1) ?v2) (fun_app$h (fun_app$i (lexordp$a ?v0) (fun_app$g (append$a ?v3) (cons$a ?v1 ?v4))) (fun_app$g (append$a ?v3) (cons$a ?v2 ?v5)))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$) (?v5 A_list$)) (=> (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (fun_app$ (fun_app$d (lexordp$ ?v0) (fun_app$f (append$ ?v3) (cons$ ?v1 ?v4))) (fun_app$f (append$ ?v3) (cons$ ?v2 ?v5)))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (fun_app$h (fun_app$i (lexordp$a ?v0) nil$a) (cons$a ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$)) (fun_app$ (fun_app$d (lexordp$ ?v0) nil$) (cons$ ?v1 ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (not (= nil$a (cons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (not (= nil$ (cons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (not (= (cons$a ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (not (= (cons$ ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 A_list_list_bool_fun$) (?v1 A_list_list$)) (=> (and (fun_app$h ?v0 nil$a) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (fun_app$h ?v0 ?v3) (fun_app$h ?v0 (fun_app$g (append$a ?v3) (cons$a ?v2 nil$a)))) )) (fun_app$h ?v0 ?v1)) ))
(assert (forall ((?v0 A_list_bool_fun$) (?v1 A_list$)) (=> (and (fun_app$ ?v0 nil$) (forall ((?v2 A$) (?v3 A_list$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ ?v0 (fun_app$f (append$ ?v3) (cons$ ?v2 nil$)))) )) (fun_app$ ?v0 ?v1)) ))
(assert (forall ((?v0 A_list_a_list_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (=> (and (fun_app$h (fun_app$j ?v0 nil$) nil$a) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$h (fun_app$j ?v0 (cons$ ?v3 ?v4)) nil$a) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$h (fun_app$j ?v0 nil$) (cons$a ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (fun_app$h (fun_app$j ?v0 ?v4) ?v6) (fun_app$h (fun_app$j ?v0 (cons$ ?v3 ?v4)) (cons$a ?v5 ?v6))) )))) (fun_app$h (fun_app$j ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list$)) (=> (and (fun_app$ (fun_app$k ?v0 nil$a) nil$) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$ (fun_app$k ?v0 (cons$a ?v3 ?v4)) nil$) ) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$ (fun_app$k ?v0 nil$a) (cons$ ?v3 ?v4)) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$ (fun_app$k ?v0 ?v4) ?v6) (fun_app$ (fun_app$k ?v0 (cons$a ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$ (fun_app$k ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (fun_app$h (fun_app$i ?v0 nil$a) nil$a) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$h (fun_app$i ?v0 (cons$a ?v3 ?v4)) nil$a) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$h (fun_app$i ?v0 nil$a) (cons$a ?v3 ?v4)) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (fun_app$h (fun_app$i ?v0 ?v4) ?v6) (fun_app$h (fun_app$i ?v0 (cons$a ?v3 ?v4)) (cons$a ?v5 ?v6))) )))) (fun_app$h (fun_app$i ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$ (fun_app$d ?v0 nil$) nil$) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$ (fun_app$d ?v0 (cons$ ?v3 ?v4)) nil$) ) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$ (fun_app$d ?v0 nil$) (cons$ ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$ (fun_app$d ?v0 ?v4) ?v6) (fun_app$ (fun_app$d ?v0 (cons$ ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$ (fun_app$d ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list_bool_fun$)) (=> (and (not (= ?v0 nil$a)) (and (forall ((?v2 A_list$)) (fun_app$h ?v1 (cons$a ?v2 nil$a)) ) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (and (not (= ?v3 nil$a)) (fun_app$h ?v1 ?v3)) (fun_app$h ?v1 (fun_app$g (append$a ?v3) (cons$a ?v2 nil$a)))) ))) (fun_app$h ?v1 ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 A$)) (fun_app$ ?v1 (cons$ ?v2 nil$)) ) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$ ?v1 ?v3)) (fun_app$ ?v1 (fun_app$f (append$ ?v3) (cons$ ?v2 nil$)))) ))) (fun_app$ ?v1 ?v0)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list_bool_fun$)) (=> (and (not (= ?v0 nil$a)) (and (forall ((?v2 A_list$)) (fun_app$h ?v1 (cons$a ?v2 nil$a)) ) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (and (not (= ?v3 nil$a)) (fun_app$h ?v1 ?v3)) (fun_app$h ?v1 (cons$a ?v2 ?v3))) ))) (fun_app$h ?v1 ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 A$)) (fun_app$ ?v1 (cons$ ?v2 nil$)) ) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$ ?v1 ?v3)) (fun_app$ ?v1 (cons$ ?v2 ?v3))) ))) (fun_app$ ?v1 ?v0)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$g (append$a nil$a) ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$f (append$ nil$) ?v1))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$)) (=> (= ?v0 (cons$a ?v1 ?v2)) (not (= ?v0 nil$a))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) (not (= ?v0 nil$))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (and (= (cons$a ?v0 ?v1) ?v2) (= ?v3 (fun_app$g (append$a ?v1) ?v4))) (= (cons$a ?v0 ?v3) (fun_app$g (append$a ?v2) ?v4))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= (cons$ ?v0 ?v1) ?v2) (= ?v3 (fun_app$f (append$ ?v1) ?v4))) (= (cons$ ?v0 ?v3) (fun_app$f (append$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= (fun_app$f (append$ ?v0) ?v1) ?v2) (= ?v3 (fun_app$f (append$ ?v1) ?v4))) (= (fun_app$f (append$ ?v0) ?v3) (fun_app$f (append$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (forall ((?v1 A_list_list$) (?v2 A_list$)) (=> (= ?v0 (fun_app$g (append$a ?v1) (cons$a ?v2 nil$a))) false) )) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 A_list$) (?v2 A$)) (=> (= ?v0 (fun_app$f (append$ ?v1) (cons$ ?v2 nil$))) false) )) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (forall ((?v1 A_list$) (?v2 A_list_list$)) (=> (= ?v0 (cons$a ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 A$) (?v2 A_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_list_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (and (forall ((?v1 A_list_list_list$)) (=> (= ?v0 (cons$b nil$a ?v1)) false) ) (forall ((?v1 A_list$) (?v2 A_list_list$) (?v3 A_list_list_list$)) (=> (= ?v0 (cons$b (cons$a ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (and (forall ((?v1 A_list_list$)) (=> (= ?v0 (cons$a nil$ ?v1)) false) ) (forall ((?v1 A$) (?v2 A_list$) (?v3 A_list_list$)) (=> (= ?v0 (cons$a (cons$ ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (and (forall ((?v1 A_list$)) (=> (= ?v0 (cons$a ?v1 nil$a)) false) ) (forall ((?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$)) (=> (= ?v0 (cons$a ?v1 (cons$a ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (and (forall ((?v1 A$)) (=> (= ?v0 (cons$ ?v1 nil$)) false) ) (forall ((?v1 A$) (?v2 A$) (?v3 A_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (=> (not (= ?v0 nil$a)) false)) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false) ))
(assert (forall ((?v0 A_list_list$)) (! (= (fun_app$g (append$a nil$a) ?v0) ?v0) :pattern ((fun_app$g (append$a nil$a) ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$f (append$ nil$) ?v0) ?v0) :pattern ((fun_app$f (append$ nil$) ?v0)))))
(assert (forall ((?v0 A_list_list$)) (= (not (= ?v0 nil$a)) (exists ((?v1 A_list$) (?v2 A_list_list$)) (= ?v0 (cons$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_list$)) (= (not (= ?v0 nil$)) (exists ((?v1 A$) (?v2 A_list$)) (= ?v0 (cons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (fun_app$f (append$ ?v0) ?v1) (fun_app$f (append$ ?v2) ?v3)) (exists ((?v4 A_list$)) (or (and (= ?v0 (fun_app$f (append$ ?v2) ?v4)) (= (fun_app$f (append$ ?v4) ?v1) ?v3)) (and (= (fun_app$f (append$ ?v0) ?v4) ?v2) (= ?v1 (fun_app$f (append$ ?v4) ?v3)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$)) (! (= (fun_app$g (append$a (cons$a ?v0 ?v1)) ?v2) (cons$a ?v0 (fun_app$g (append$a ?v1) ?v2))) :pattern ((fun_app$g (append$a (cons$a ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$)) (! (= (fun_app$f (append$ (cons$ ?v0 ?v1)) ?v2) (cons$ ?v0 (fun_app$f (append$ ?v1) ?v2))) :pattern ((fun_app$f (append$ (cons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$)) (= (= (cons$a ?v0 ?v1) (fun_app$g (append$a ?v2) ?v3)) (or (and (= ?v2 nil$a) (= (cons$a ?v0 ?v1) ?v3)) (exists ((?v4 A_list_list$)) (and (= (cons$a ?v0 ?v4) ?v2) (= ?v1 (fun_app$g (append$a ?v4) ?v3))) ))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (fun_app$f (append$ ?v2) ?v3)) (or (and (= ?v2 nil$) (= (cons$ ?v0 ?v1) ?v3)) (exists ((?v4 A_list$)) (and (= (cons$ ?v0 ?v4) ?v2) (= ?v1 (fun_app$f (append$ ?v4) ?v3))) ))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (fun_app$g (append$a ?v0) ?v1) (cons$a ?v2 ?v3)) (or (and (= ?v0 nil$a) (= ?v1 (cons$a ?v2 ?v3))) (exists ((?v4 A_list_list$)) (and (= ?v0 (cons$a ?v2 ?v4)) (= (fun_app$g (append$a ?v4) ?v1) ?v3)) ))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (fun_app$f (append$ ?v0) ?v1) (cons$ ?v2 ?v3)) (or (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) (exists ((?v4 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (= (fun_app$f (append$ ?v4) ?v1) ?v3)) ))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (member$ ?v0 (set$a (cons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (member$a ?v0 (set$ (cons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list$)) (=> (member$ ?v0 (set$a ?v1)) (member$ ?v0 (set$a (cons$a ?v2 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$)) (=> (member$a ?v0 (set$ ?v1)) (member$a ?v0 (set$ (cons$ ?v2 ?v1)))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (=> (and (member$ ?v0 (set$a ?v1)) (and (forall ((?v2 A_list_list$)) (=> (= ?v1 (cons$a ?v0 ?v2)) false) ) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (and (= ?v1 (cons$a ?v2 ?v3)) (member$ ?v0 (set$a ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (=> (and (member$a ?v0 (set$ ?v1)) (and (forall ((?v2 A_list$)) (=> (= ?v1 (cons$ ?v0 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (= ?v1 (cons$ ?v2 ?v3)) (member$a ?v0 (set$ ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_list$)) (=> (member$ ?v0 (set$a (cons$a ?v1 ?v2))) (or (= ?v0 ?v1) (member$ ?v0 (set$a ?v2)))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$)) (=> (member$a ?v0 (set$ (cons$ ?v1 ?v2))) (or (= ?v0 ?v1) (member$a ?v0 (set$ ?v2)))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (=> (fun_app$ (fun_app$d (lexordp$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$d (lexordp$ ?v0) (fun_app$f (append$ ?v3) ?v1)) (fun_app$f (append$ ?v3) ?v2))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (=> (and (fun_app$ (fun_app$d (lexordp$ ?v0) (fun_app$f (append$ ?v1) ?v2)) (fun_app$f (append$ ?v1) ?v3)) (forall ((?v4 A$)) (not (fun_app$a (fun_app$b ?v0 ?v4) ?v4)) )) (fun_app$ (fun_app$d (lexordp$ ?v0) ?v2) ?v3)) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (fun_app$ (fun_app$d ?v0 ?v1) ?v2) (fun_app$h (fun_app$i (lexordp$a ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (fun_app$ (fun_app$d (lexordp$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (and (not (fun_app$ (fun_app$d ?v0 ?v1) ?v2)) (and (not (fun_app$ (fun_app$d ?v0 ?v2) ?v1)) (fun_app$h (fun_app$i (lexordp$a ?v0) ?v3) ?v4))) (fun_app$h (fun_app$i (lexordp$a ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (and (not (fun_app$a (fun_app$b ?v0 ?v1) ?v2)) (and (not (fun_app$a (fun_app$b ?v0 ?v2) ?v1)) (fun_app$ (fun_app$d (lexordp$ ?v0) ?v3) ?v4))) (fun_app$ (fun_app$d (lexordp$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (fun_app$ (fun_app$d ?v0 ?v1) ?v2) (fun_app$h (fun_app$i (lexordp_eq$a ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (fun_app$ (fun_app$d (lexordp_eq$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (and (not (fun_app$ (fun_app$d ?v0 ?v1) ?v2)) (and (not (fun_app$ (fun_app$d ?v0 ?v2) ?v1)) (fun_app$h (fun_app$i (lexordp_eq$a ?v0) ?v3) ?v4))) (fun_app$h (fun_app$i (lexordp_eq$a ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (and (not (fun_app$a (fun_app$b ?v0 ?v1) ?v2)) (and (not (fun_app$a (fun_app$b ?v0 ?v2) ?v1)) (fun_app$ (fun_app$d (lexordp_eq$ ?v0) ?v3) ?v4))) (fun_app$ (fun_app$d (lexordp_eq$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$)) (fun_app$h (fun_app$i (lexordp_eq$a ?v0) nil$a) ?v1) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (fun_app$ (fun_app$d (lexordp_eq$ ?v0) nil$) ?v1) ))
(assert (forall ((?v0 A_b_rbt$)) (=> (not (= ?v0 empty$)) (not (= (keys$ ?v0) nil$))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (greaterThanLessThan$ ?v0 ?v1 ?v2) (fun_app$e (inf$ (greaterThan$ ?v0 ?v1)) (lessThan$ ?v0 ?v2))) :pattern ((greaterThanLessThan$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (greaterThanLessThan$ ?v0 ?v1 ?v2) (fun_app$e (inf$ (greaterThan$ ?v0 ?v1)) (lessThan$ ?v0 ?v2))) :pattern ((greaterThanLessThan$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (=> (forall ((?v2 A$)) (not (fun_app$a (fun_app$b ?v0 ?v2) ?v2)) ) (not (fun_app$ (fun_app$d (lexordp$ ?v0) ?v1) ?v1))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (fun_app$ (fun_app$d (lexordp_eq$ ?v0) ?v1) ?v1) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_a_list_bool_fun_fun$) (?v2 A_list$)) (= (member$ ?v0 (lessThan$a ?v1 ?v2)) (fun_app$ (fun_app$d ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$) (?v2 A$)) (= (member$a ?v0 (lessThan$ ?v1 ?v2)) (fun_app$a (fun_app$b ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_a_list_bool_fun_fun$) (?v2 A_list$)) (= (member$ ?v0 (greaterThan$a ?v1 ?v2)) (fun_app$ (fun_app$d ?v1 ?v2) ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$) (?v2 A$)) (= (member$a ?v0 (greaterThan$ ?v1 ?v2)) (fun_app$a (fun_app$b ?v1 ?v2) ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_a_list_fun$)) (! (= (bind$ (cons$a ?v0 ?v1) ?v2) (fun_app$f (append$ (fun_app$f ?v2 ?v0)) (bind$ ?v1 ?v2))) :pattern ((bind$ (cons$a ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_a_list_fun$)) (! (= (bind$a (cons$ ?v0 ?v1) ?v2) (fun_app$f (append$ (fun_app$l ?v2 ?v0)) (bind$a ?v1 ?v2))) :pattern ((bind$a (cons$ ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_set$)) (=> (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)) (member$ ?v0 (inf$a ?v1 ?v2))) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$a ?v0 ?v1) (member$a ?v0 ?v2)) (member$a ?v0 (fun_app$e (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_set$)) (= (member$ ?v0 (inf$a ?v1 ?v2)) (and (member$ ?v0 ?v1) (member$ ?v0 ?v2))) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (member$a ?v0 (fun_app$e (inf$ ?v1) ?v2)) (and (member$a ?v0 ?v1) (member$a ?v0 ?v2))) ))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$e (inf$ ?v0) ?v0) ?v0) :pattern ((inf$ ?v0)))))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$e (inf$ ?v0) ?v0) ?v0) :pattern ((inf$ ?v0)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$e (inf$ ?v0) (fun_app$e (inf$ ?v0) ?v1)) (fun_app$e (inf$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$e (inf$ ?v0) (fun_app$e (inf$ ?v0) ?v1)) (fun_app$e (inf$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$e (inf$ (fun_app$e (inf$ ?v0) ?v1)) ?v1) (fun_app$e (inf$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$e (inf$ (fun_app$e (inf$ ?v0) ?v1)) ?v1) (fun_app$e (inf$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_a_list_list_fun$)) (! (= (bind$b nil$ ?v0) nil$a) :pattern ((bind$b nil$ ?v0)))))
(assert (forall ((?v0 A_list_a_list_fun$)) (! (= (bind$ nil$a ?v0) nil$) :pattern ((bind$ nil$a ?v0)))))
(assert (forall ((?v0 A_list_a_list_list_fun$)) (! (= (bind$c nil$a ?v0) nil$a) :pattern ((bind$c nil$a ?v0)))))
(assert (forall ((?v0 A_a_list_fun$)) (! (= (bind$a nil$ ?v0) nil$) :pattern ((bind$a nil$ ?v0)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$e (inf$ (fun_app$e (inf$ ?v0) ?v1)) ?v2) (fun_app$e (inf$ ?v0) (fun_app$e (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$e (inf$ (fun_app$e (inf$ ?v0) ?v1)) ?v2) (fun_app$e (inf$ ?v0) (fun_app$e (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$e (inf$ (fun_app$e (inf$ ?v0) ?v1)) ?v2) (fun_app$e (inf$ ?v0) (fun_app$e (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$e (inf$ ?v0) (fun_app$e (inf$ ?v1) ?v2)) (fun_app$e (inf$ ?v1) (fun_app$e (inf$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$e (inf$ ?v0) (fun_app$e (inf$ ?v1) ?v2)) (fun_app$e (inf$ ?v1) (fun_app$e (inf$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$e (inf$ ?v0) (fun_app$e (inf$ ?v1) ?v2)) (fun_app$e (inf$ ?v1) (fun_app$e (inf$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$e (inf$ ?v0) (fun_app$e (inf$ ?v0) ?v1)) (fun_app$e (inf$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$e (inf$ ?v0) ?v1) (fun_app$e (inf$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$e (inf$ ?v0) ?v1) (fun_app$e (inf$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$e (inf$ ?v0) ?v1) (fun_app$e (inf$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$e (inf$ (fun_app$e (inf$ ?v0) ?v1)) ?v2) (fun_app$e (inf$ ?v0) (fun_app$e (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$e (inf$ ?v0) (fun_app$e (inf$ ?v1) ?v2)) (fun_app$e (inf$ ?v1) (fun_app$e (inf$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$e (inf$ ?v0) (fun_app$e (inf$ ?v0) ?v1)) (fun_app$e (inf$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$e (inf$ ?v0) ?v1) (fun_app$e (inf$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$e (inf$ ?v0) ?v0) ?v0) :pattern ((inf$ ?v0)))))
(assert (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_set$)) (=> (and (member$ ?v0 (inf$a ?v1 ?v2)) (=> (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)) false)) false) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$a ?v0 (fun_app$e (inf$ ?v1) ?v2)) (=> (and (member$a ?v0 ?v1) (member$a ?v0 ?v2)) false)) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_set$)) (=> (member$ ?v0 (inf$a ?v1 ?v2)) (member$ ?v0 ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (member$a ?v0 (fun_app$e (inf$ ?v1) ?v2)) (member$a ?v0 ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_set$)) (=> (member$ ?v0 (inf$a ?v1 ?v2)) (member$ ?v0 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (member$a ?v0 (fun_app$e (inf$ ?v1) ?v2)) (member$a ?v0 ?v1)) ))
(assert (forall ((?v0 A_list$)) (= (the_elem$ (set$a (cons$a ?v0 nil$a))) ?v0) ))
(assert (forall ((?v0 A$)) (= (the_elem$a (set$ (cons$ ?v0 nil$))) ?v0) ))
(assert (= (sublists$ nil$a) (cons$b nil$a nil$b)))
(assert (= (sublists$a nil$) (cons$a nil$ nil$a)))
(assert (= (product_lists$ nil$b) (cons$b nil$a nil$b)))
(assert (= (product_lists$a nil$a) (cons$a nil$ nil$a)))
(assert (forall ((?v0 A_list_a_list_fun$) (?v1 A_list$) (?v2 A_list_list$)) (! (= (fun_app$m (maps$ ?v0) (cons$a ?v1 ?v2)) (fun_app$f (append$ (fun_app$f ?v0 ?v1)) (fun_app$m (maps$ ?v0) ?v2))) :pattern ((fun_app$m (maps$ ?v0) (cons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_a_list_fun$) (?v1 A$) (?v2 A_list$)) (! (= (fun_app$f (maps$a ?v0) (cons$ ?v1 ?v2)) (fun_app$f (append$ (fun_app$l ?v0 ?v1)) (fun_app$f (maps$a ?v0) ?v2))) :pattern ((fun_app$f (maps$a ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_list_list_fun$)) (! (= (fun_app$n (maps$b ?v0) nil$) nil$a) :pattern ((maps$b ?v0)))))
(assert (forall ((?v0 A_list_a_list_fun$)) (! (= (fun_app$m (maps$ ?v0) nil$a) nil$) :pattern ((maps$ ?v0)))))
(assert (forall ((?v0 A_list_a_list_list_fun$)) (! (= (fun_app$g (maps$c ?v0) nil$a) nil$a) :pattern ((maps$c ?v0)))))
(assert (forall ((?v0 A_a_list_fun$)) (! (= (fun_app$f (maps$a ?v0) nil$) nil$) :pattern ((maps$a ?v0)))))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (! (=> (not (member$ ?v0 (set$a ?v1))) (= (fun_app$g (insert$ ?v0) ?v1) (cons$a ?v0 ?v1))) :pattern ((fun_app$g (insert$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (=> (not (member$a ?v0 (set$ ?v1))) (= (fun_app$f (insert$a ?v0) ?v1) (cons$ ?v0 ?v1))) :pattern ((fun_app$f (insert$a ?v0) ?v1)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$g (insert$ ?v0) nil$a) (cons$a ?v0 nil$a)) :pattern ((insert$ ?v0)))))
(assert (forall ((?v0 A$)) (! (= (fun_app$f (insert$a ?v0) nil$) (cons$ ?v0 nil$)) :pattern ((insert$a ?v0)))))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (= (rotate1$ (cons$a ?v0 ?v1)) (fun_app$g (append$a ?v1) (cons$a ?v0 nil$a))) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (= (rotate1$a (cons$ ?v0 ?v1)) (fun_app$f (append$ ?v1) (cons$ ?v0 nil$))) ))
(assert (forall ((?v0 A_list_list$)) (= (= (rotate1$ ?v0) nil$a) (= ?v0 nil$a)) ))
(assert (forall ((?v0 A_list$)) (= (= (rotate1$a ?v0) nil$) (= ?v0 nil$)) ))
(assert (forall ((?v0 A_list$)) (= (set$ (rotate1$a ?v0)) (set$ ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (! (=> (member$ ?v0 (set$a ?v1)) (= (fun_app$g (insert$ ?v0) ?v1) ?v1)) :pattern ((fun_app$g (insert$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (=> (member$a ?v0 (set$ ?v1)) (= (fun_app$f (insert$a ?v0) ?v1) ?v1)) :pattern ((fun_app$f (insert$a ?v0) ?v1)))))
(assert (= (rotate1$ nil$a) nil$a))
(assert (= (rotate1$a nil$) nil$))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (! (= (fun_app$g (insert$ ?v0) ?v1) (ite (member$ ?v0 (set$a ?v1)) ?v1 (cons$a ?v0 ?v1))) :pattern ((fun_app$g (insert$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (fun_app$f (insert$a ?v0) ?v1) (ite (member$a ?v0 (set$ ?v1)) ?v1 (cons$ ?v0 ?v1))) :pattern ((fun_app$f (insert$a ?v0) ?v1)))))
