
plugins {
  id "com.github.maiflai.scalatest" version "0.26" // For scalatest runner
}
apply plugin: 'scala'
apply plugin: 'distribution'
apply plugin: 'antlr'

sourceCompatibility = JavaVersion.VERSION_1_10
targetCompatibility = JavaVersion.VERSION_1_10

repositories{
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.7.2"
    implementation "org.antlr:antlr4-runtime:4.7.2"
    
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.scalatest:scalatest_2.13:3.0.8'
    testImplementation 'org.pegdown:pegdown:1.4.2' // For scalatest html output
    
    implementation 'org.scala-lang:scala-library:2.13.1'
}

// Antlr Parser Generator

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]
    arguments += ['-package', 'fortress.inputs'] // Add fortress.inputs package header to files
}

// Distribution

// Zip up both the main fortress jar and any runtime dependencies
// Note that these are kept as separate jars in the zip file, not one fat jar
distributions {
    main {
        contents {
            from configurations.runtimeClasspath
            from jar
        }
    }
}

test.ignoreFailures = true // Let build continue even if tests are failing

// Additional compiler flags

// High verbosity warnings
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
}

compileScala { // or: tasks.withType(ScalaCompile)
    scalaCompileOptions.additionalParameters = ["-feature", "-deprecation"] // Feature explicit import warnings deprecation warnings
}
