apply plugin: 'scala'
apply plugin: 'distribution'
apply plugin: 'antlr'

sourceCompatibility = JavaVersion.VERSION_1_10
targetCompatibility = JavaVersion.VERSION_1_10

repositories{
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.7.2"
    implementation "org.antlr:antlr4-runtime:4.7.2"
    implementation files('z3/com.microsoft.z3.jar')
    runtimeOnly files('z3/libz3java.dylib') // Required to run Z3's Java interface on MacOS
    runtimeOnly files('z3/libz3java.so') // Required to run Z3's Java interface on Ubuntu
    
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.scalatest:scalatest_2.13:3.0.8'
    
    implementation 'org.scala-lang:scala-library:2.13.1'
    // implementation 'org.scala-lang.modules:scala-parallel-collections_2.13:0.2.0'
}

// Antlr Parser Generator

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]
    arguments += ['-package', 'fortress.inputs'] // Add fortress.inputs package header to files
}

// JUnit

test {
    ignoreFailures true // Don't stop build when unit test fails
    testLogging {
        events "passed", "skipped", "failed"
        // Print summary
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

tasks.withType(Test) {
    // Allow junit test runtime to find libz3java.dylib or libz3java.so
    systemProperty "java.library.path", "z3/"
}

// Distribution

// Zip up both the main fortress jar and any runtime dependencies
// Note that these are kept as separate jars in the zip file, not one fat jar
distributions {
    main {
        contents {
            from configurations.runtimeClasspath
            from jar
        }
    }
}

// Additional compiler flags

// High verbosity warnings
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
}

compileScala { // or: tasks.withType(ScalaCompile)
    scalaCompileOptions.additionalParameters = ["-feature"] // Feature explicit import warnings
    scalaCompileOptions.additionalParameters = ["-deprecation"] // Deprecation warnings
}

// Exec Runner
task runner(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  systemProperty "java.library.path", "z3/" // Find z3 Java interface
  main = "fortress.exec.AddressBook1h"
}
