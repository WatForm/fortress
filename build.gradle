apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'antlr'

sourceCompatibility = JavaVersion.VERSION_1_10
targetCompatibility = JavaVersion.VERSION_1_10

repositories{
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.7.2"
    compile "org.antlr:antlr4-runtime:4.7.2"
    compile group: 'com.oath.cyclops', name: 'cyclops', version: '10.1.0'
    compile files('z3/com.microsoft.z3.jar')
    runtime files('z3/libz3java.dylib') // Required to run Z3's Java interface on MacOS
    runtime files('z3/libz3java.so') // Required to run Z3's Java interface on Ubuntu
    
    testCompile 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
}

// JUnit

test {
    ignoreFailures true // Don't stop build when unit test fails
    testLogging {
        events "passed", "skipped", "failed"
        // Print summary
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

tasks.withType(Test) {
    // Allow junit test runtime to find libz3java.dylib or libz3java.so
    systemProperty "java.library.path", "z3/"
}

// Antlr Parser Generator

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]
    arguments += ['-package', 'fortress.inputs'] // Add fortress.inputs package header to files
}

// Javadoc
javadoc {
    options.tags = ["publish"] // Custom tags
    javadoc.options.addStringOption('Xdoclint:none', '-quiet') // Turn off doclint
    options.addBooleanOption('html5', true) // Generate in HTML5
}

// Distribution

// Zip up both the main fortress jar and any runtime dependencies
// Note that these are kept as separate jars in the zip file, not one fat jar
distributions {
    main {
        contents {
            from configurations.runtime
            from jar
        }
    }
}

// High verbosity warnings
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
}
